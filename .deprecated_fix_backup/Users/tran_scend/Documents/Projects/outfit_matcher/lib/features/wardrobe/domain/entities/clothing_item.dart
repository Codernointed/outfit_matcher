
// These parts will be generated by running build_runner
// part 'clothing_item.freezed.dart';
// part 'clothing_item.g.dart';

/// Enum for clothing item types
enum ClothingType {
  /// Top clothing items like shirts, t-shirts, blouses
  top,

  /// Bottom clothing items like pants, skirts, shorts
  bottom,

  /// Full body clothing items like dresses, jumpsuits
  dress,

  /// Footwear like shoes, sneakers, boots
  footwear,

  /// Accessories like hats, bags, belts
  accessory,

  /// Outerwear like jackets, coats
  outerwear,
}

/// Enum for clothing item colors
enum ClothingColor {
  /// Red color
  red,

  /// Blue color
  blue,

  /// Green color
  green,

  /// Yellow color
  yellow,

  /// Black color
  black,

  /// White color
  white,

  /// Purple color
  purple,

  /// Orange color
  orange,

  /// Pink color
  pink,

  /// Brown color
  brown,

  /// Gray color
  gray,
}

/// Enum for clothing item occasions
enum ClothingOccasion {
  /// Casual everyday wear
  casual,

  /// Formal business attire
  formal,

  /// Sports and workout clothes
  sport,

  /// Party and special events
  party,

  /// Beach and vacation wear
  beach,
}

/// Enum for clothing item patterns
enum ClothingPattern {
  /// Solid color, no pattern
  solid,

  /// Striped pattern
  striped,

  /// Polka dots pattern
  polka_dot,

  /// Floral pattern
  floral,

  /// Plaid or checkered pattern
  plaid,

  /// Animal print pattern
  animal_print,

  /// Geometric pattern
  geometric,

  /// Abstract pattern
  abstract,
}

/// Enum for clothing materials
enum ClothingMaterial {
  /// Cotton fabric
  cotton,

  /// Wool fabric
  wool,

  /// Silk fabric
  silk,

  /// Synthetic fabrics like polyester
  synthetic,

  /// Denim fabric
  denim,

  /// Leather material
  leather,

  /// Linen fabric
  linen,

  /// Blend of materials
  blend,
}

/// Enum for clothing fit types
enum ClothingFit {
  /// Slim or tight fit
  slim,

  /// Regular or standard fit
  regular,

  /// Loose or relaxed fit
  loose,

  /// Oversized fit
  oversized,

  /// Bodycon or fitted
  fitted,
}

/// Enum for clothing formality levels
enum ClothingFormality {
  /// Very casual, everyday wear
  very_casual,

  /// Casual wear
  casual,

  /// Smart casual
  smart_casual,

  /// Business formal
  business_formal,

  /// Black tie formal
  black_tie,
}

/// Clothing item entity model
class ClothingItem {
  /// Unique identifier for the item
  final String id;

  /// Type of clothing item
  final ClothingType type;

  /// Primary color of the item
  final ClothingColor color;

  /// Occasion the item is suitable for
  final ClothingOccasion occasion;

  /// Local image path of the item
  final String imagePath;

  /// Optional notes about the item
  final String? notes;

  /// Creation timestamp
  final DateTime createdAt;

  /// Default constructor for clothing item
  const ClothingItem({
    required this.id,
    required this.type,
    required this.color,
    required this.occasion,
    required this.imagePath,
    this.notes,
    required this.createdAt,
  });

  /// Create from JSON
  factory ClothingItem.fromJson(Map<String, dynamic> json) {
    return ClothingItem(
      id: json['id'] as String,
      type: ClothingType.values.firstWhere(
        (e) => e.toString() == 'ClothingType.${json['type']}',
        orElse: () => ClothingType.top,
      ),
      color: ClothingColor.values.firstWhere(
        (e) => e.toString() == 'ClothingColor.${json['color']}',
        orElse: () => ClothingColor.blue,
      ),
      occasion: ClothingOccasion.values.firstWhere(
        (e) => e.toString() == 'ClothingOccasion.${json['occasion']}',
        orElse: () => ClothingOccasion.casual,
      ),
      imagePath: json['imagePath'] as String,
      notes: json['notes'] as String?,
      createdAt: DateTime.parse(json['createdAt'] as String),
    );
  }

  /// Convert to JSON
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'type': type.toString().split('.').last,
      'color': color.toString().split('.').last,
      'occasion': occasion.toString().split('.').last,
      'imagePath': imagePath,
      'notes': notes,
      'createdAt': createdAt.toIso8601String(),
    };
  }
}
